# Generated by Django 4.2.7 on 2025-09-26 22:48

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('achievement_type', models.CharField(choices=[('speed', 'Speed Achievement'), ('accuracy', 'Accuracy Achievement'), ('consistency', 'Consistency Achievement'), ('endurance', 'Endurance Achievement'), ('lesson', 'Lesson Completion'), ('challenge', 'Challenge Completion'), ('voice', 'Voice Typing Achievement'), ('social', 'Social Achievement'), ('special', 'Special Achievement')], max_length=20)),
                ('rarity', models.CharField(choices=[('common', 'Common'), ('uncommon', 'Uncommon'), ('rare', 'Rare'), ('epic', 'Epic'), ('legendary', 'Legendary')], default='common', max_length=20)),
                ('required_wpm', models.PositiveIntegerField(blank=True, null=True)),
                ('required_accuracy', models.PositiveIntegerField(blank=True, null=True)),
                ('required_sessions', models.PositiveIntegerField(blank=True, null=True)),
                ('required_lessons', models.PositiveIntegerField(blank=True, null=True)),
                ('required_challenges', models.PositiveIntegerField(blank=True, null=True)),
                ('required_voice_sessions', models.PositiveIntegerField(blank=True, null=True)),
                ('icon', models.CharField(help_text='Icon class or filename', max_length=100)),
                ('color', models.CharField(default='#FFD700', help_text='Hex color code', max_length=7)),
                ('points', models.PositiveIntegerField(default=10)),
                ('is_active', models.BooleanField(default=True)),
                ('is_premium', models.BooleanField(default=False)),
                ('order', models.PositiveIntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Achievement',
                'verbose_name_plural': 'Achievements',
                'db_table': 'achievements',
                'ordering': ['rarity', 'order'],
            },
        ),
        migrations.CreateModel(
            name='AnalyticsEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('session_start', 'Session Started'), ('session_complete', 'Session Completed'), ('lesson_start', 'Lesson Started'), ('lesson_complete', 'Lesson Completed'), ('challenge_start', 'Challenge Started'), ('challenge_complete', 'Challenge Completed'), ('achievement_earned', 'Achievement Earned'), ('voice_session', 'Voice Session'), ('login', 'User Login'), ('logout', 'User Logout'), ('profile_update', 'Profile Updated'), ('settings_change', 'Settings Changed')], max_length=30)),
                ('data', models.JSONField(blank=True, default=dict)),
                ('session_id', models.CharField(blank=True, max_length=100)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('referrer', models.URLField(blank=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Analytics Event',
                'verbose_name_plural': 'Analytics Events',
                'db_table': 'analytics_events',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='DailyStreak',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('sessions_completed', models.PositiveIntegerField(default=0)),
                ('total_time', models.DurationField(default=datetime.timedelta(0))),
                ('words_typed', models.PositiveIntegerField(default=0)),
                ('is_streak_day', models.BooleanField(default=True)),
                ('streak_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Daily Streak',
                'verbose_name_plural': 'Daily Streaks',
                'db_table': 'daily_streaks',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='UserStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_sessions', models.PositiveIntegerField(default=0)),
                ('total_typing_time', models.DurationField(default=datetime.timedelta(0))),
                ('total_words_typed', models.PositiveIntegerField(default=0)),
                ('total_characters_typed', models.PositiveIntegerField(default=0)),
                ('average_wpm', models.FloatField(default=0.0)),
                ('best_wpm', models.FloatField(default=0.0)),
                ('average_accuracy', models.FloatField(default=0.0)),
                ('best_accuracy', models.FloatField(default=0.0)),
                ('lessons_completed', models.PositiveIntegerField(default=0)),
                ('challenges_completed', models.PositiveIntegerField(default=0)),
                ('achievements_earned', models.PositiveIntegerField(default=0)),
                ('current_streak', models.PositiveIntegerField(default=0)),
                ('longest_streak', models.PositiveIntegerField(default=0)),
                ('voice_sessions', models.PositiveIntegerField(default=0)),
                ('average_pronunciation', models.FloatField(default=0.0)),
                ('best_pronunciation', models.FloatField(default=0.0)),
                ('friends_count', models.PositiveIntegerField(default=0)),
                ('times_shared', models.PositiveIntegerField(default=0)),
                ('total_points', models.PositiveIntegerField(default=0)),
                ('current_level', models.PositiveIntegerField(default=1)),
                ('experience_points', models.PositiveIntegerField(default=0)),
                ('last_activity', models.DateTimeField(blank=True, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='stats', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Statistics',
                'verbose_name_plural': 'User Statistics',
                'db_table': 'user_stats',
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('progress_percentage', models.PositiveIntegerField(default=0)),
                ('is_earned', models.BooleanField(default=False)),
                ('earned_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_achievements', to='analytics.achievement')),
            ],
            options={
                'verbose_name': 'User Achievement',
                'verbose_name_plural': 'User Achievements',
                'db_table': 'user_achievements',
            },
        ),
    ]
